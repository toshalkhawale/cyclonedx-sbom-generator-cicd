AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Inspector SBOM Scanner - Automated infrastructure for scanning SBOMs with AWS Inspector'

Parameters:
  SbomBucketName:
    Type: String
    Description: Name for the S3 bucket to store SBOMs (must be globally unique)
    Default: sbom-storage-bucket
  
  ResultsBucketName:
    Type: String
    Description: Name for the S3 bucket to store scan results (must be globally unique)
    Default: sbom-results-bucket
  
  SbomPrefix:
    Type: String
    Description: Prefix for SBOM files in the S3 bucket
    Default: sboms/
  
  DailyScheduleEnabled:
    Type: String
    Description: Enable daily scheduled scans of all SBOMs
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

Resources:
  # S3 bucket for storing SBOMs
  SbomBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SbomBucketName
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldVersions
            Status: Enabled
            ExpirationInDays: 90
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref SbomPrefix
            Function: !GetAtt TriggerSbomScanLambda.Arn

  # S3 bucket for storing scan results
  ResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ResultsBucketName
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldResults
            Status: Enabled
            ExpirationInDays: 90

  # Bucket policy to allow Inspector to access SBOMs
  SbomBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SbomBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowInspectorAccess
            Effect: Allow
            Principal:
              Service: inspector2.amazonaws.com
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${SbomBucket}
              - !Sub arn:aws:s3:::${SbomBucket}/*

  # Lambda permission for S3 to invoke the trigger function
  TriggerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TriggerSbomScanLambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:s3:::${SbomBucket}

  # IAM role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonInspector2FullAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${SbomBucket}
                  - !Sub arn:aws:s3:::${SbomBucket}/*
                  - !Sub arn:aws:s3:::${ResultsBucket}
                  - !Sub arn:aws:s3:::${ResultsBucket}/*
        - PolicyName: StepFunctionsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref SbomScanStateMachine

  # IAM role for Step Functions
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt InitiateSbomScanLambda.Arn
                  - !GetAtt CheckScanStatusLambda.Arn
                  - !GetAtt GetScanResultsLambda.Arn

  # Lambda function to trigger SBOM scan when a new SBOM is uploaded
  TriggerSbomScanLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref SbomScanStateMachine
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          def handler(event, context):
              # Get the S3 event details
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  
                  # Only process files in the sboms/ prefix
                  if not key.startswith('sboms/'):
                      print(f"Skipping non-SBOM file: {key}")
                      continue
                  
                  # Determine SBOM format based on file extension
                  sbom_format = 'CYCLONEDX_1_4'  # Default
                  if key.endswith('.json'):
                      sbom_format = 'CYCLONEDX_1_4'
                  elif key.endswith('.xml'):
                      sbom_format = 'CYCLONEDX_1_4'
                  
                  # Start the Step Function execution
                  sfn_client = boto3.client('stepfunctions')
                  response = sfn_client.start_execution(
                      stateMachineArn=os.environ['STATE_MACHINE_ARN'],
                      input=json.dumps({
                          'bucket': bucket,
                          'key': key,
                          'format': sbom_format
                      })
                  )
                  
                  print(f"Started Step Function execution: {response['executionArn']}")
              
              return {
                  'statusCode': 200,
                  'body': 'Processing started'
              }

  # Lambda function to initiate SBOM scan
  InitiateSbomScanLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          SBOM_BUCKET: !Ref SbomBucket
          RESULTS_BUCKET: !Ref ResultsBucket
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          import uuid
          from datetime import datetime

          def handler(event, context):
              # Get the S3 bucket and key from the event
              s3_bucket = event['bucket'] if 'bucket' in event else os.environ['SBOM_BUCKET']
              s3_key = event['key']
              sbom_format = event.get('format', 'CYCLONEDX_1_4')
              
              # Generate a unique scan name
              scan_name = f"sbom-scan-{datetime.now().strftime('%Y%m%d-%H%M%S')}-{uuid.uuid4().hex[:8]}"
              
              # Create S3 URL
              s3_url = f"s3://{s3_bucket}/{s3_key}"
              
              # Create Inspector SBOM scan
              inspector = boto3.client('inspector2')
              response = inspector.create_sbom_scan(
                  name=scan_name,
                  sbomFormat=sbom_format,
                  sbomUrl=s3_url
              )
              
              print(f"Created SBOM scan: {response['sbomScanId']}")
              
              return {
                  'scanId': response['sbomScanId'],
                  'scanName': scan_name,
                  'sbomUrl': s3_url
              }

  # Lambda function to check scan status
  CheckScanStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          def handler(event, context):
              scan_id = event['scanId']
              
              # Check scan status
              inspector = boto3.client('inspector2')
              response = inspector.get_sbom_scan(sbomScanId=scan_id)
              
              status = response['status']
              print(f"Scan {scan_id} status: {status}")
              
              return {
                  'scanId': scan_id,
                  'scanName': event['scanName'],
                  'sbomUrl': event['sbomUrl'],
                  'status': status,
                  'isDone': status != 'IN_PROGRESS'
              }

  # Lambda function to get scan results
  GetScanResultsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          RESULTS_BUCKET: !Ref ResultsBucket
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          from datetime import datetime

          def handler(event, context):
              scan_id = event['scanId']
              scan_name = event['scanName']
              results_bucket = os.environ['RESULTS_BUCKET']
              
              # Get scan results
              inspector = boto3.client('inspector2')
              scan_response = inspector.get_sbom_scan(sbomScanId=scan_id)
              
              # Get findings
              findings_response = inspector.list_findings(
                  filterCriteria={
                      'sbomScanArn': {
                          'comparison': 'EQUALS',
                          'value': scan_id
                      }
                  }
              )
              
              # Count findings by severity
              severity_counts = {
                  'CRITICAL': 0,
                  'HIGH': 0,
                  'MEDIUM': 0,
                  'LOW': 0,
                  'INFORMATIONAL': 0
              }
              
              for finding in findings_response.get('findings', []):
                  severity = finding.get('severity', 'INFORMATIONAL')
                  severity_counts[severity] = severity_counts.get(severity, 0) + 1
              
              # Create summary
              summary = {
                  'scanId': scan_id,
                  'scanName': scan_name,
                  'status': scan_response['status'],
                  'completedAt': scan_response.get('completedAt', '').isoformat() if 'completedAt' in scan_response else None,
                  'findingCounts': severity_counts,
                  'totalFindings': sum(severity_counts.values()),
                  'sbomUrl': event['sbomUrl']
              }
              
              # Save results to S3
              timestamp = datetime.now().strftime('%Y%m%d-%H%M%S')
              s3_client = boto3.client('s3')
              
              # Save scan details
              s3_client.put_object(
                  Bucket=results_bucket,
                  Key=f"scans/{scan_id}/scan-details.json",
                  Body=json.dumps(scan_response, default=str),
                  ContentType='application/json'
              )
              
              # Save findings
              s3_client.put_object(
                  Bucket=results_bucket,
                  Key=f"scans/{scan_id}/findings.json",
                  Body=json.dumps(findings_response, default=str),
                  ContentType='application/json'
              )
              
              # Save summary
              s3_client.put_object(
                  Bucket=results_bucket,
                  Key=f"scans/{scan_id}/summary.json",
                  Body=json.dumps(summary, default=str),
                  ContentType='application/json'
              )
              
              return summary

  # Lambda function to list all SBOMs and trigger scans
  ListSbomsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 900
      Environment:
        Variables:
          SBOM_BUCKET: !Ref SbomBucket
          STATE_MACHINE_ARN: !Ref SbomScanStateMachine
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          def handler(event, context):
              s3_client = boto3.client('s3')
              sfn_client = boto3.client('stepfunctions')
              sbom_bucket = os.environ['SBOM_BUCKET']
              state_machine_arn = os.environ['STATE_MACHINE_ARN']
              
              # List all SBOMs in the bucket
              paginator = s3_client.get_paginator('list_objects_v2')
              pages = paginator.paginate(Bucket=sbom_bucket, Prefix='sboms/')
              
              scan_count = 0
              for page in pages:
                  for obj in page.get('Contents', []):
                      key = obj['Key']
                      
                      # Determine SBOM format based on file extension
                      sbom_format = 'CYCLONEDX_1_4'  # Default
                      if key.endswith('.json'):
                          sbom_format = 'CYCLONEDX_1_4'
                      elif key.endswith('.xml'):
                          sbom_format = 'CYCLONEDX_1_4'
                      
                      # Start the Step Function execution
                      response = sfn_client.start_execution(
                          stateMachineArn=state_machine_arn,
                          input=json.dumps({
                              'bucket': sbom_bucket,
                              'key': key,
                              'format': sbom_format
                          })
                      )
                      
                      print(f"Started Step Function execution for {key}: {response['executionArn']}")
                      scan_count += 1
              
              return {
                  'statusCode': 200,
                  'body': f'Started {scan_count} SBOM scans'
              }

  # Step Function state machine for SBOM scanning workflow
  SbomScanStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      Definition:
        Comment: "SBOM Scanning Workflow"
        StartAt: InitiateSbomScan
        States:
          InitiateSbomScan:
            Type: Task
            Resource: !GetAtt InitiateSbomScanLambda.Arn
            Next: CheckScanStatus
          CheckScanStatus:
            Type: Task
            Resource: !GetAtt CheckScanStatusLambda.Arn
            Next: IsScanComplete
          IsScanComplete:
            Type: Choice
            Choices:
              - Variable: "$.isDone"
                BooleanEquals: true
                Next: GetScanResults
            Default: WaitForScanCompletion
          WaitForScanCompletion:
            Type: Wait
            Seconds: 30
            Next: CheckScanStatus
          GetScanResults:
            Type: Task
            Resource: !GetAtt GetScanResultsLambda.Arn
            End: true
      LoggingConfiguration:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn

  # CloudWatch Log Group for Step Functions
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/states/SbomScanStateMachine-${AWS::StackName}"
      RetentionInDays: 30

  # EventBridge rule for daily SBOM scanning
  DailyScanRule:
    Type: AWS::Events::Rule
    Condition: IsDailyScheduleEnabled
    Properties:
      Description: "Trigger daily SBOM scanning"
      ScheduleExpression: "cron(0 0 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt ListSbomsLambda.Arn
          Id: "DailySbomScan"

  # Permission for EventBridge to invoke Lambda
  DailyScanPermission:
    Type: AWS::Lambda::Permission
    Condition: IsDailyScheduleEnabled
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ListSbomsLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailyScanRule.Arn

Conditions:
  IsDailyScheduleEnabled: !Equals [!Ref DailyScheduleEnabled, 'true']

Outputs:
  SbomBucketName:
    Description: "Name of the S3 bucket for storing SBOMs"
    Value: !Ref SbomBucket
  
  ResultsBucketName:
    Description: "Name of the S3 bucket for storing scan results"
    Value: !Ref ResultsBucket
  
  SbomUploadPrefix:
    Description: "Prefix for uploading SBOMs"
    Value: !Ref SbomPrefix
  
  UploadCommand:
    Description: "Command to upload a SBOM for scanning"
    Value: !Sub "aws s3 cp your-sbom.json s3://${SbomBucket}/${SbomPrefix}"
  
  StateMachineArn:
    Description: "ARN of the Step Function state machine"
    Value: !Ref SbomScanStateMachine
